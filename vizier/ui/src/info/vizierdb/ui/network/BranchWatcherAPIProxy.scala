package info.vizierdb.ui.network

/* this file is AUTOGENERATED by `scripts/build_routes` from `vizier/resources/vizier-routes.txt` */
/* DO NOT EDIT THIS FILE DIRECTLY */

import play.api.libs.json._
import info.vizierdb.types._
import info.vizierdb.serialized
import info.vizierdb.serializers._
import scala.concurrent.Future
import info.vizierdb.spark.caveats.DataContainer
import scala.concurrent.ExecutionContext.Implicits.global

abstract class BranchWatcherAPIProxy
{
  def sendRequest(leafPath: Seq[String], args: Map[String, JsValue]): Future[JsValue]

  def workflowGet(): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowGet"), Map())
       .map { _.as[serialized.WorkflowDescription] }
  def workflowCancel(): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowCancel"), Map())
       .map { _.as[serialized.WorkflowDescription] }
  def workflowQuery(query:String): Future[DataContainer] =
    sendRequest(Seq("workflowQuery"), Map("query" -> Json.toJson(query)))
       .map { _.as[DataContainer] }
  def workflowModules(): Future[Seq[serialized.ModuleDescription]] =
    sendRequest(Seq("workflowModules"), Map())
       .map { _.as[Seq[serialized.ModuleDescription]] }
  def workflowAppend(packageId:String, commandId:String, arguments:serialized.CommandArgumentList.T): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowAppend"), Map("packageId" -> Json.toJson(packageId), "commandId" -> Json.toJson(commandId), "arguments" -> Json.toJson(arguments)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowSuggest(before:Long, after:Long): Future[Seq[serialized.PackageDescription]] =
    sendRequest(Seq("workflowSuggest"), Map("before" -> Json.toJson(before), "after" -> Json.toJson(after)))
       .map { _.as[Seq[serialized.PackageDescription]] }
  def workflowGetModule(modulePosition:Int): Future[serialized.ModuleDescription] =
    sendRequest(Seq("workflowGetModule"), Map("modulePosition" -> Json.toJson(modulePosition)))
       .map { _.as[serialized.ModuleDescription] }
  def workflowInsert(modulePosition:Int, packageId:String, commandId:String, arguments:serialized.CommandArgumentList.T): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowInsert"), Map("modulePosition" -> Json.toJson(modulePosition), "packageId" -> Json.toJson(packageId), "commandId" -> Json.toJson(commandId), "arguments" -> Json.toJson(arguments)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowDelete(modulePosition:Int): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowDelete"), Map("modulePosition" -> Json.toJson(modulePosition)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowReplace(modulePosition:Int, packageId:String, commandId:String, arguments:serialized.CommandArgumentList.T): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowReplace"), Map("modulePosition" -> Json.toJson(modulePosition), "packageId" -> Json.toJson(packageId), "commandId" -> Json.toJson(commandId), "arguments" -> Json.toJson(arguments)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowThawUpto(modulePosition:Int): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowThawUpto"), Map("modulePosition" -> Json.toJson(modulePosition)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowThawOne(modulePosition:Int): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowThawOne"), Map("modulePosition" -> Json.toJson(modulePosition)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowFreezeFrom(modulePosition:Int): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowFreezeFrom"), Map("modulePosition" -> Json.toJson(modulePosition)))
       .map { _.as[serialized.WorkflowDescription] }
  def workflowFreezeOne(modulePosition:Int): Future[serialized.WorkflowDescription] =
    sendRequest(Seq("workflowFreezeOne"), Map("modulePosition" -> Json.toJson(modulePosition)))
       .map { _.as[serialized.WorkflowDescription] }
}
