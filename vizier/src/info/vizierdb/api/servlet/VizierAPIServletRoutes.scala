package info.vizierdb.api.servlet

/* this file is AUTOGENERATED by `scripts/build_routes` from `vizier/resources/vizier-routes.txt` */
/* DO NOT EDIT THIS FILE DIRECTLY */

import play.api.libs.json._
import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}
import java.net.URLDecoder
import org.mimirdb.api.Response
import info.vizierdb.types._
import info.vizierdb.api._
import info.vizierdb.api.response.CORSPreflightResponse
import info.vizierdb.api.handler._
import info.vizierdb.serialized
import info.vizierdb.serializers._

trait VizierAPIServletRoutes extends HttpServlet {

  def processResponse(request: HttpServletRequest, output: HttpServletResponse)(response: => Response): Unit
  def fourOhFour(response: HttpServletRequest): Response
  implicit def liftToOption[T](x: T): Option[T] = Some(x)
  def queryParameter(connection: JettyClientConnection, name:String): Option[String] =
    Option(connection.getParameter(name)).map { URLDecoder.decode(_, "UTF-8") }

  val ROUTE_PATTERN_4 = "/projects/([0-9]+)/export".r
  val ROUTE_PATTERN_5 = "/projects/([0-9]+)".r
  val ROUTE_PATTERN_6 = "/projects/([0-9]+)".r
  val ROUTE_PATTERN_7 = "/projects/([0-9]+)".r
  val ROUTE_PATTERN_8 = "/projects/([0-9]+)".r
  val ROUTE_PATTERN_9 = "/projects/([0-9]+)/branches".r
  val ROUTE_PATTERN_10 = "/projects/([0-9]+)/branches".r
  val ROUTE_PATTERN_11 = "/projects/([0-9]+)/branches/([0-9]+)".r
  val ROUTE_PATTERN_12 = "/projects/([0-9]+)/branches/([0-9]+)".r
  val ROUTE_PATTERN_13 = "/projects/([0-9]+)/branches/([0-9]+)".r
  val ROUTE_PATTERN_14 = "/projects/([0-9]+)/branches/([0-9]+)/cancel".r
  val ROUTE_PATTERN_15 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)".r
  val ROUTE_PATTERN_16 = "/projects/([0-9]+)/branches/([0-9]+)/head".r
  val ROUTE_PATTERN_17 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/cancel".r
  val ROUTE_PATTERN_18 = "/projects/([0-9]+)/branches/([0-9]+)/head/cancel".r
  val ROUTE_PATTERN_19 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/sql".r
  val ROUTE_PATTERN_20 = "/projects/([0-9]+)/branches/([0-9]+)/head/sql".r
  val ROUTE_PATTERN_21 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/graph".r
  val ROUTE_PATTERN_22 = "/projects/([0-9]+)/branches/([0-9]+)/head/graph".r
  val ROUTE_PATTERN_23 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules".r
  val ROUTE_PATTERN_24 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules".r
  val ROUTE_PATTERN_25 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules".r
  val ROUTE_PATTERN_26 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules".r
  val ROUTE_PATTERN_27 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)".r
  val ROUTE_PATTERN_28 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)".r
  val ROUTE_PATTERN_29 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)".r
  val ROUTE_PATTERN_30 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)".r
  val ROUTE_PATTERN_31 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)".r
  val ROUTE_PATTERN_32 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)".r
  val ROUTE_PATTERN_33 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)".r
  val ROUTE_PATTERN_34 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)".r
  val ROUTE_PATTERN_35 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)/thaw".r
  val ROUTE_PATTERN_36 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)/thaw".r
  val ROUTE_PATTERN_37 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)/thaw_one".r
  val ROUTE_PATTERN_38 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)/thaw_one".r
  val ROUTE_PATTERN_39 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)/freeze".r
  val ROUTE_PATTERN_40 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)/freeze".r
  val ROUTE_PATTERN_41 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)/freeze_one".r
  val ROUTE_PATTERN_42 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)/freeze_one".r
  val ROUTE_PATTERN_43 = "/projects/([0-9]+)/branches/([0-9]+)/workflows/([0-9]+)/modules/([0-9]+)/charts/([0-9]+)".r
  val ROUTE_PATTERN_44 = "/projects/([0-9]+)/branches/([0-9]+)/head/modules/([0-9]+)/charts/([0-9]+)".r
  val ROUTE_PATTERN_45 = "/projects/([0-9]+)/datasets".r
  val ROUTE_PATTERN_46 = "/projects/([0-9]+)/datasets/([0-9]+)".r
  val ROUTE_PATTERN_47 = "/projects/([0-9]+)/datasets/([0-9]+)/annotations".r
  val ROUTE_PATTERN_48 = "/projects/([0-9]+)/datasets/([0-9]+)/descriptor".r
  val ROUTE_PATTERN_49 = "/projects/([0-9]+)/datasets/([0-9]+)/csv".r
  val ROUTE_PATTERN_50 = "/projects/([0-9]+)/datasets/([0-9]+)/file".r
  val ROUTE_PATTERN_51 = "/projects/([0-9]+)/artifacts/([0-9]+)".r
  val ROUTE_PATTERN_52 = "/projects/([0-9]+)/artifacts/([0-9]+)/annotations".r
  val ROUTE_PATTERN_53 = "/projects/([0-9]+)/artifacts/([0-9]+)/descriptor".r
  val ROUTE_PATTERN_54 = "/projects/([0-9]+)/artifacts/([0-9]+)/csv".r
  val ROUTE_PATTERN_55 = "/projects/([0-9]+)/artifacts/([0-9]+)/file".r
  val ROUTE_PATTERN_56 = "/projects/([0-9]+)/files".r
  val ROUTE_PATTERN_57 = "/projects/([0-9]+)/files/([0-9]+)".r
  val ROUTE_PATTERN_58 = "/projects/([0-9]+)/files/([0-9]+)/(.+)".r

  override def doGet(request: HttpServletRequest, response: HttpServletResponse) = 
  {
    val connection = new JettyClientConnection(request, response)
    lazy val jsonBody = connection.getJson.as[JsObject]
    processResponse(request, response) {
      request.getPathInfo match {
        case "/" => ServiceDescriptor()
        case "/projects" => ListProjects()
        case ROUTE_PATTERN_4(projectId) => ExportProject(projectId = projectId.toLong)
        case ROUTE_PATTERN_5(projectId) => GetProject(projectId = projectId.toLong)
        case ROUTE_PATTERN_9(projectId) => ListBranches(projectId = projectId.toLong)
        case ROUTE_PATTERN_11(projectId, branchId) => GetBranch(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_15(projectId, branchId, workflowId) => GetWorkflow(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong)
        case ROUTE_PATTERN_16(projectId, branchId) => GetWorkflow(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_19(projectId, branchId, workflowId) => WorkflowSQL(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, query = queryParameter(connection, "query"))
        case ROUTE_PATTERN_20(projectId, branchId) => WorkflowSQL(projectId = projectId.toLong, branchId = branchId.toLong, query = queryParameter(connection, "query"))
        case ROUTE_PATTERN_21(projectId, branchId, workflowId) => VizualizeWorkflow(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong)
        case ROUTE_PATTERN_22(projectId, branchId) => VizualizeWorkflow(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_23(projectId, branchId, workflowId) => GetAllModules(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong)
        case ROUTE_PATTERN_24(projectId, branchId) => GetAllModules(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_27(projectId, branchId, workflowId, modulePosition) => GetModule(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_28(projectId, branchId, modulePosition) => GetModule(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_43(projectId, branchId, workflowId, modulePosition, artifactId) => GetArtifact.typed(ArtifactType.CHART)(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt, artifactId = artifactId.toInt)
        case ROUTE_PATTERN_44(projectId, branchId, modulePosition, artifactId) => GetArtifact.typed(ArtifactType.CHART)(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt, artifactId = artifactId.toInt)
        case ROUTE_PATTERN_46(projectId, artifactId) => GetArtifact.typed(ArtifactType.DATASET)(projectId = projectId.toLong, artifactId = artifactId.toLong, offset = queryParameter(connection, "offset").map { _.toLong }, limit = queryParameter(connection, "limit").map { _.toInt }, profile = queryParameter(connection, "profile"))
        case ROUTE_PATTERN_47(projectId, artifactId) => GetArtifact.Annotations(projectId = projectId.toLong, artifactId = artifactId.toLong, column = queryParameter(connection, "column").map { _.toInt }, row = queryParameter(connection, "row"))
        case ROUTE_PATTERN_48(projectId, artifactId) => GetArtifact.Summary(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_49(projectId, artifactId) => GetArtifact.CSV(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_50(projectId, artifactId) => GetArtifact.File(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_51(projectId, artifactId) => GetArtifact(projectId = projectId.toLong, artifactId = artifactId.toLong, offset = queryParameter(connection, "offset").map { _.toLong }, limit = queryParameter(connection, "limit").map { _.toInt }, profile = queryParameter(connection, "profile"))
        case ROUTE_PATTERN_52(projectId, artifactId) => GetArtifact.Annotations(projectId = projectId.toLong, artifactId = artifactId.toLong, column = queryParameter(connection, "column").map { _.toInt }, row = queryParameter(connection, "row"))
        case ROUTE_PATTERN_53(projectId, artifactId) => GetArtifact.Summary(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_54(projectId, artifactId) => GetArtifact.CSV(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_55(projectId, artifactId) => GetArtifact.File(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_57(projectId, artifactId) => GetArtifact.File(projectId = projectId.toLong, artifactId = artifactId.toLong)
        case ROUTE_PATTERN_58(projectId, artifactId, tail) => GetArtifact.File(projectId = projectId.toLong, artifactId = artifactId.toLong, tail = tail)
        case "/tasks" => ListTasks()
        case _ => fourOhFour(request)
      }
    }
  }
  override def doPost(request: HttpServletRequest, response: HttpServletResponse) = 
  {
    val connection = new JettyClientConnection(request, response)
    lazy val jsonBody = connection.getJson.as[JsObject]
    processResponse(request, response) {
      request.getPathInfo match {
        case "/projects" => CreateProject(properties = (jsonBody \ "properties").as[serialized.PropertyList.T])
        case "/projects/import" => ImportProject(file = connection.getPart("file"))
        case ROUTE_PATTERN_6(projectId) => UpdateProject(projectId = projectId.toLong, properties = (jsonBody \ "properties").as[serialized.PropertyList.T], defaultBranch = (jsonBody \ "defaultBranch").asOpt[Identifier])
        case ROUTE_PATTERN_10(projectId) => CreateBranch(projectId = projectId.toLong, source = (jsonBody \ "source").asOpt[serialized.BranchSource], properties = (jsonBody \ "properties").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_14(projectId, branchId) => CancelWorkflow(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_17(projectId, branchId, workflowId) => CancelWorkflow(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong)
        case ROUTE_PATTERN_18(projectId, branchId) => CancelWorkflow(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_25(projectId, branchId, workflowId) => AppendModule(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, packageId = (jsonBody \ "packageId").as[String], commandId = (jsonBody \ "commandId").as[String], arguments = (jsonBody \ "arguments").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_26(projectId, branchId) => AppendModule(projectId = projectId.toLong, branchId = branchId.toLong, packageId = (jsonBody \ "packageId").as[String], commandId = (jsonBody \ "commandId").as[String], arguments = (jsonBody \ "arguments").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_29(projectId, branchId, workflowId, modulePosition) => InsertModule(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt, packageId = (jsonBody \ "packageId").as[String], commandId = (jsonBody \ "commandId").as[String], arguments = (jsonBody \ "arguments").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_30(projectId, branchId, modulePosition) => InsertModule(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt, packageId = (jsonBody \ "packageId").as[String], commandId = (jsonBody \ "commandId").as[String], arguments = (jsonBody \ "arguments").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_35(projectId, branchId, workflowId, modulePosition) => ThawModules(thawUptoHere=true)(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_36(projectId, branchId, modulePosition) => ThawModules(thawUptoHere=true)(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_37(projectId, branchId, workflowId, modulePosition) => ThawModules(thawUptoHere=false)(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_38(projectId, branchId, modulePosition) => ThawModules(thawUptoHere=false)(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_39(projectId, branchId, workflowId, modulePosition) => FreezeModules(freezeFromHere=true)(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_40(projectId, branchId, modulePosition) => FreezeModules(freezeFromHere=true)(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_41(projectId, branchId, workflowId, modulePosition) => FreezeModules(freezeFromHere=false)(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_42(projectId, branchId, modulePosition) => FreezeModules(freezeFromHere=false)(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_45(projectId) => CreateDataset(projectId = projectId.toLong, columns = (jsonBody \ "columns").as[Seq[serialized.DatasetColumn]], rows = (jsonBody \ "rows").as[Seq[serialized.DatasetRow]], name = (jsonBody \ "name").asOpt[String], properties = (jsonBody \ "properties").as[serialized.PropertyList.T], annotations = (jsonBody \ "annotations").asOpt[serialized.DatasetAnnotation])
        case ROUTE_PATTERN_56(projectId) => CreateFile(projectId = projectId.toLong, file = connection.getPart("file"))
        case "/reload" => Reload()
        case _ => fourOhFour(request)
      }
    }
  }
  override def doDelete(request: HttpServletRequest, response: HttpServletResponse) = 
  {
    val connection = new JettyClientConnection(request, response)
    lazy val jsonBody = connection.getJson.as[JsObject]
    processResponse(request, response) {
      request.getPathInfo match {
        case ROUTE_PATTERN_7(projectId) => DeleteProject(projectId = projectId.toLong)
        case ROUTE_PATTERN_12(projectId, branchId) => DeleteBranch(projectId = projectId.toLong, branchId = branchId.toLong)
        case ROUTE_PATTERN_31(projectId, branchId, workflowId, modulePosition) => DeleteModule(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt)
        case ROUTE_PATTERN_32(projectId, branchId, modulePosition) => DeleteModule(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt)
        case _ => fourOhFour(request)
      }
    }
  }
  override def doPut(request: HttpServletRequest, response: HttpServletResponse) = 
  {
    val connection = new JettyClientConnection(request, response)
    lazy val jsonBody = connection.getJson.as[JsObject]
    processResponse(request, response) {
      request.getPathInfo match {
        case ROUTE_PATTERN_8(projectId) => UpdateProject(projectId = projectId.toLong, properties = (jsonBody \ "properties").as[serialized.PropertyList.T], defaultBranch = (jsonBody \ "defaultBranch").asOpt[Identifier])
        case ROUTE_PATTERN_13(projectId, branchId) => UpdateBranch(projectId = projectId.toLong, branchId = branchId.toLong, properties = (jsonBody \ "properties").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_33(projectId, branchId, workflowId, modulePosition) => ReplaceModule(projectId = projectId.toLong, branchId = branchId.toLong, workflowId = workflowId.toLong, modulePosition = modulePosition.toInt, packageId = (jsonBody \ "packageId").as[String], commandId = (jsonBody \ "commandId").as[String], arguments = (jsonBody \ "arguments").as[serialized.PropertyList.T])
        case ROUTE_PATTERN_34(projectId, branchId, modulePosition) => ReplaceModule(projectId = projectId.toLong, branchId = branchId.toLong, modulePosition = modulePosition.toInt, packageId = (jsonBody \ "packageId").as[String], commandId = (jsonBody \ "commandId").as[String], arguments = (jsonBody \ "arguments").as[serialized.PropertyList.T])
        case _ => fourOhFour(request)
      }
    }
  }

  override def doOptions(request: HttpServletRequest, response: HttpServletResponse) = 
  {
    val connection = new JettyClientConnection(request, response)
    processResponse(request, response) {
      request.getPathInfo match {
        case "/" => CORSPreflightResponse("GET")
        case "/projects" => CORSPreflightResponse("GET", "POST")
        case "/projects/import" => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_4(projectId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_5(projectId) => CORSPreflightResponse("GET", "POST", "DELETE", "PUT")
        case ROUTE_PATTERN_9(projectId) => CORSPreflightResponse("GET", "POST")
        case ROUTE_PATTERN_11(projectId, branchId) => CORSPreflightResponse("GET", "DELETE", "PUT")
        case ROUTE_PATTERN_14(projectId, branchId) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_15(projectId, branchId, workflowId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_16(projectId, branchId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_17(projectId, branchId, workflowId) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_18(projectId, branchId) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_19(projectId, branchId, workflowId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_20(projectId, branchId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_21(projectId, branchId, workflowId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_22(projectId, branchId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_23(projectId, branchId, workflowId) => CORSPreflightResponse("GET", "POST")
        case ROUTE_PATTERN_24(projectId, branchId) => CORSPreflightResponse("GET", "POST")
        case ROUTE_PATTERN_27(projectId, branchId, workflowId, modulePosition) => CORSPreflightResponse("GET", "POST", "DELETE", "PUT")
        case ROUTE_PATTERN_28(projectId, branchId, modulePosition) => CORSPreflightResponse("GET", "POST", "DELETE", "PUT")
        case ROUTE_PATTERN_35(projectId, branchId, workflowId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_36(projectId, branchId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_37(projectId, branchId, workflowId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_38(projectId, branchId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_39(projectId, branchId, workflowId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_40(projectId, branchId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_41(projectId, branchId, workflowId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_42(projectId, branchId, modulePosition) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_43(projectId, branchId, workflowId, modulePosition, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_44(projectId, branchId, modulePosition, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_45(projectId) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_46(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_47(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_48(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_49(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_50(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_51(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_52(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_53(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_54(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_55(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_56(projectId) => CORSPreflightResponse("POST")
        case ROUTE_PATTERN_57(projectId, artifactId) => CORSPreflightResponse("GET")
        case ROUTE_PATTERN_58(projectId, artifactId, tail) => CORSPreflightResponse("GET")
        case "/tasks" => CORSPreflightResponse("GET")
        case "/reload" => CORSPreflightResponse("POST")
        case _ => fourOhFour(request)
      }
    }
  }
}
