package info.vizierdb.api.websocket

/* this file is AUTOGENERATED by `scripts/build_routes` from `vizier/resources/vizier-routes.txt` */
/* DO NOT EDIT THIS FILE DIRECTLY */

import play.api.libs.json._
import info.vizierdb.types._
import info.vizierdb.api.handler._
import info.vizierdb.api._
import info.vizierdb.serialized
import info.vizierdb.serializers._
import org.mimirdb.api.request.DataContainer

abstract class BranchWatcherAPIRoutes
{
  implicit def liftToOption[T](x: T): Option[T] = Some(x)
  def projectId: Identifier
  def branchId: Identifier

  def route(path: Seq[String], args: Map[String, JsValue]): JsValue =
    path.last match {
      case "workflowGet" => Json.toJson(GetWorkflow(projectId = projectId, branchId = branchId):serialized.WorkflowDescription)
      case "workflowCancel" => Json.toJson(CancelWorkflow(projectId = projectId, branchId = branchId):serialized.WorkflowDescription)
      case "workflowQuery" => Json.toJson(WorkflowSQL(projectId = projectId, branchId = branchId, query = args("query").as[String]):DataContainer)
      case "workflowModules" => Json.toJson(GetAllModules(projectId = projectId, branchId = branchId):Seq[serialized.ModuleDescription])
      case "workflowAppend" => Json.toJson(AppendModule(projectId = projectId, branchId = branchId, packageId = args("packageId").as[String], commandId = args("commandId").as[String], arguments = args("arguments").as[serialized.CommandArgumentList.T]):serialized.WorkflowDescription)
      case "workflowGetModule" => Json.toJson(GetModule(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int]):serialized.ModuleDescription)
      case "workflowInsert" => Json.toJson(InsertModule(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int], packageId = args("packageId").as[String], commandId = args("commandId").as[String], arguments = args("arguments").as[serialized.CommandArgumentList.T]):serialized.WorkflowDescription)
      case "workflowDelete" => Json.toJson(DeleteModule(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int]):serialized.WorkflowDescription)
      case "workflowReplace" => Json.toJson(ReplaceModule(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int], packageId = args("packageId").as[String], commandId = args("commandId").as[String], arguments = args("arguments").as[serialized.CommandArgumentList.T]):serialized.WorkflowDescription)
      case "workflowThawUpto" => Json.toJson(ThawModules(thawUptoHere=true)(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int]):serialized.WorkflowDescription)
      case "workflowThawOne" => Json.toJson(ThawModules(thawUptoHere=false)(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int]):serialized.WorkflowDescription)
      case "workflowFreezeFrom" => Json.toJson(FreezeModules(freezeFromHere=true)(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int]):serialized.WorkflowDescription)
      case "workflowFreezeOne" => Json.toJson(FreezeModules(freezeFromHere=false)(projectId = projectId, branchId = branchId, modulePosition = args("modulePosition").as[Int]):serialized.WorkflowDescription)
    }
}
