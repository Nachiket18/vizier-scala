package info.vizierdb.api.servlet

/* this file is AUTOGENERATED by `scripts/build_routes` from `vizier/resources/vizier-routes.txt` */
/* DO NOT EDIT THIS FILE DIRECTLY */

import play.api.libs.json._
import info.vizierdb.types._
import info.vizierdb.api.handler._
import info.vizierdb.api._
import org.mimirdb.api.Response

object WebsocketEvents
{
  def headAction(
    action: String, 
    projectId: Identifier, 
    branchId: Identifier, 
    args: JsObject
  ): Option[Response] = 
    action match {
      case "workflow.get" => Some(GetWorkflowHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId)), null))
      case "workflow.cancel" => Some(CancelWorkflowHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId)), null))
      case "workflow.query" => Some(WorkflowSQLHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId)), null))
      case "workflow.modules" => Some(GetAllModulesHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId)), null))
      case "workflow.append_module" => Some(JsonHandler[AppendModule].handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId)), null))
      case "workflow.get_module" => Some(GetModuleHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.insert_module" => Some(JsonHandler[InsertModule].handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.delete_module" => Some(DeleteModuleHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.replace_module" => Some(JsonHandler[ReplaceModule].handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.thaw_upto" => Some(ThawModulesHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.thaw_one" => Some(ThawModulesHandler.ThawOne.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.freeze_from" => Some(FreezeModulesHandler.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case "workflow.freeze_one" => Some(FreezeModulesHandler.FreezeOne.handle(Map("projectId" -> JsNumber(projectId), "branchId" -> JsNumber(branchId), "modulePosition" -> (args \ "modulePosition").get), null))
      case _ => None
    }
}
