# -- copyright-header:v2 --
# Copyright (C) 2017-2021 University at Buffalo,
#                         New York University,
#                         Illinois Institute of Technology.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -- copyright-header:end --
from typing import cast, List, Dict, Tuple
import re
import sys

INPUT_FILE = "vizier/resources/vizier-routes.txt"
SERVLET_FILE = "vizier/src/info/vizierdb/api/servlet/VizierAPIServletRoutes.scala"
WEBSOCKET_FILE = "vizier/src/info/vizierdb/api/websocket/WebsocketRequestRoutes.scala"

with open(INPUT_FILE) as f:
  routes = [
    (idx, path, verb, handler, group, action)
    for idx, line in enumerate(f.readlines())
    for path, verb, group, action, handler in [re.split(" +", line.rstrip())]
  ]

matcherDefinitions: List[str] = []
verbHandlers: Dict[str, List[str]] = {}
preflightPaths: Dict[str, Tuple[List[str], str]] = {}


def extract_path_fields(path) -> Tuple[List[Tuple[str, str]], List[str]]:
  pathComponents = path.split("/")
  regexp: List[str] = []
  fields: List[Tuple[str,str]] = []
  for component in pathComponents:
    match = re.match("\\{([^}:]+):([^}]+)\\}", component)
    if match is None:
      regexp += [component]
    else:
      fieldName = match.group(1)
      fieldType = match.group(2)
      if fieldType == "int":
        regexp += ["([0-9]+)"]
        fields += [ (fieldName, "JsNumber({}.toLong)".format(fieldName)) ]  # noqa: E201, E202
      elif fieldType == "subpath":
        regexp += ["(.+)"]
        fields += [ (fieldName, "JsString({})".format(fieldName)) ]  # noqa: E201, E202
      else:
        raise ValueError("Unsupported field type: {} in {}".format(
                          fieldType, "/".join(pathComponents)))
  return (fields, regexp)


def format_arg_constructor(fields: List[Tuple[str, str]]) -> str:
  return "Map({})".format(
    ", ".join(
      "\"{}\" -> {}".format(fieldName, fieldEncoder)
      for fieldName, fieldEncoder in fields
    )
  )


# ##################### Servlet ######################

for idx, path, verb, handler, group, action in routes:
  fields, regexp = extract_path_fields(path)

  if len(fields) == 0:
    matcher = "\"" + path + "\""
  else:
    matcher = "ROUTE_PATTERN_{}({})".format(
                idx,
                ", ".join(fieldName for fieldName, fieldEncoder in fields)
              )
    matcherDefinitions += [
      "val ROUTE_PATTERN_{} = \"{}\".r".format(
        idx,
        "/".join(regexp)
      )
    ]
  
  handlerParameters = ", ".join([format_arg_constructor(fields), "connection"])

  invokeHandler = "case {} => {}.handle({})".format(
                    matcher, handler, handlerParameters)

  if verb not in verbHandlers:
    verbHandlers[verb] = cast(List[str], [])
  verbHandlers[verb] += [invokeHandler]

  if path not in preflightPaths:
    preflightPaths[path] = ([], matcher)
  preflightPaths[path][0].append(verb)

original_stdout = sys.stdout
with open(SERVLET_FILE, "w") as f:
  sys.stdout = f
  print("package info.vizierdb.api.servlet")
  print("")
  print("/* this file is AUTOGENERATED by `scripts/build_routes` from `{}` */".format(INPUT_FILE))
  print("/* DO NOT EDIT THIS FILE DIRECTLY */")
  print("")
  print("import play.api.libs.json._")
  print("import javax.servlet.http.{HttpServlet, HttpServletRequest, HttpServletResponse}")
  print("import org.mimirdb.api.Response")
  print("import info.vizierdb.types._")
  print("import info.vizierdb.api._")
  print("import info.vizierdb.api.response.CORSPreflightResponse")
  print("import info.vizierdb.api.handler._")
  print("")
  print("trait VizierAPIServletRoutes extends HttpServlet {")
  print("")
  print("  def processResponse(request: HttpServletRequest, output: HttpServletResponse)(response: => Response): Unit")
  print("  def fourOhFour(response: HttpServletRequest): Response")
  print("")

  print("\n".join("  " + matcher for matcher in matcherDefinitions))

  print("")
  for verb in verbHandlers:
    capsedVerb = verb[0].upper() + verb[1:].lower()
    print("  override def do{}(request: HttpServletRequest, response: HttpServletResponse) = ".format(capsedVerb))
    print("  {")
    print("    val connection = new JettyClientConnection(request, response)")
    print("    processResponse(request, response) {")
    print("      request.getPathInfo match {")
    for handler in verbHandlers[verb]:
      print("        " + handler)
    print("        case _ => fourOhFour(request)")
    print("      }")
    print("    }")
    print("  }")

  print("")
  print("  override def doOptions(request: HttpServletRequest, response: HttpServletResponse) = ")
  print("  {")
  print("    val connection = new JettyClientConnection(request, response)")
  print("    processResponse(request, response) {")
  print("      request.getPathInfo match {")
  for preflightPath in preflightPaths:
    verbs, matcher = preflightPaths[preflightPath]
    print("        case {} => CORSPreflightResponse({})".format(
            matcher,
            ", ".join("\"" + verb + "\"" for verb in verbs)
          ))
  print("        case _ => fourOhFour(request)")
  print("      }")
  print("    }")
  print("  }")
  print("}")
sys.stdout = original_stdout

# ##################### Websocket ######################

with open(WEBSOCKET_FILE, "w") as f:
  sys.stdout = f
  print("package info.vizierdb.api.servlet")
  print("")
  print("/* this file is AUTOGENERATED by `scripts/build_routes` from `{}` */".format(INPUT_FILE))
  print("/* DO NOT EDIT THIS FILE DIRECTLY */")
  print("")
  print("import play.api.libs.json._")
  print("import info.vizierdb.types._")
  print("import info.vizierdb.api.handler._")
  print("import info.vizierdb.api._")
  print("import org.mimirdb.api.Response")
  print("")
  print("object WebsocketEvents")
  print("{")
  print("  def headAction(")
  print("    action: String, ")
  print("    projectId: Identifier, ")
  print("    branchId: Identifier, ")
  print("    args: JsObject")
  print("  ): Option[Response] = ")
  print("    action match {")
  for idx, path, verb, handler, group, action in routes:
    if group != "workflow" or not (action.startswith("head_")):
      continue
    action = group + "." + action.replace("head_", "")
    
    args = {
      "projectId": "JsNumber(projectId)",
      "branchId":  "JsNumber(branchId)",  # noqa: E241
    }
    fields, regexp = extract_path_fields(path)
    for field, extractor in fields:
      if field not in args:
        args[field] = "(args \\ \"{}\").get".format(field)

    handlerParameters = ", ".join([format_arg_constructor(list((arg, args[arg]) for arg in args)), "null"])

    print("      case \"{}\" => Some({}.handle({}))".format(action, handler, handlerParameters))
  print("      case _ => None")
  print("    }")
  print("}")
sys.stdout = original_stdout
